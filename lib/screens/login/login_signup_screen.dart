import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:hackathon_project/screens/home_screen.dart';
import 'package:http/http.dart' as http;

class Autogenerated {
  String? id;
  String? password;

  Autogenerated({this.id, this.password});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    id = json['id'];
    password = json['password'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['id'] = this.id;
    data['password'] = this.password;
    return data;
  }
}

Future<List<Autogenerated>> fetchIdPasswordData() async {
  final url = Uri.parse(
      'https://raw.githubusercontent.com/su-resh/id_pass/main/id_pass.json');
  final response = await http.get(url);

  if (response.statusCode == 200) {
    List<dynamic> jsonData = json.decode(response.body);
    return jsonData.map((json) => Autogenerated.fromJson(json)).toList();
  } else {
    throw Exception('Failed to load data');
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LoginScreen(),
      theme: ThemeData(
        primarySwatch: Colors.orange,
      ),
    );
  }
}

class LoginScreen extends StatefulWidget {
  @override
  _LoginScreenState createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final TextEditingController idController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  List<Autogenerated>? idPassList;
  String? errorMessage;

  @override
  void initState() {
    super.initState();
    fetchIdPasswordData().then((data) {
      setState(() {
        idPassList = data;
      });
    }).catchError((e) {
      setState(() {
        errorMessage = 'Failed to load data';
      });
    });
  }

  void login() {
    String id = idController.text;
    String password = passwordController.text;

    if (idPassList != null) {
      bool matched =
          idPassList!.any((item) => item.id == id && item.password == password);

      if (matched) {
        Navigator.push(
          context,
          MaterialPageRoute(builder: (context) => HomeScreen()),
        );
      } else {
        setState(() {
          errorMessage = 'Invalid ID or Password';
        });
      }
    } else {
      setState(() {
        errorMessage = 'Data not loaded yet';
      });
    }
  }

  void signup() {
    String id = idController.text;
    String password = passwordController.text;

    if (id.isNotEmpty && password.isNotEmpty) {
      if (idPassList != null && !idPassList!.any((item) => item.id == id)) {
        setState(() {
          idPassList!.add(Autogenerated(id: id, password: password));
          errorMessage = 'Signup successful! You can now log in.';
        });
      } else {
        setState(() {
          errorMessage = 'ID already exists';
        });
      }
    } else {
      setState(() {
        errorMessage = 'ID and Password cannot be empty';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Center(
                child: Column(
                  children: [
                    Image.network(
                      "https://i.postimg.cc/SQM5Ghk7/Untitled-design.png", // Replace with your logo asset
                      height: 200,
                    ),
                    const SizedBox(height: 20),
                    const Text('Welcome Back!!',
                        style: TextStyle(
                            fontSize: 24, fontWeight: FontWeight.bold)),
                    const SizedBox(height: 10),
                    const Text('Login into your account',
                        style: TextStyle(fontSize: 16, color: Colors.grey)),
                  ],
                ),
              ),
              const SizedBox(height: 40),
              TextField(
                controller: idController,
                decoration: const InputDecoration(
                  labelText: 'Enter your User-ID',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 20),
              TextField(
                controller: passwordController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: 'Enter your password',
                  border: OutlineInputBorder(),
                  suffixIcon: Icon(Icons.visibility),
                ),
              ),
              const SizedBox(height: 10),
              Align(
                alignment: Alignment.centerRight,
                child: TextButton(
                  onPressed: () {},
                  child: const Text('Forgot Password?'),
                ),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: login,
                child: const Text('Login', style: TextStyle(fontSize: 18)),
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 15),
                  backgroundColor: Colors.orange,
                ),
              ),
              if (errorMessage != null) ...[
                const SizedBox(height: 20),
                Text(
                  errorMessage!,
                  style: const TextStyle(color: Colors.red),
                ),
              ],
              const SizedBox(height: 20),
              const Row(
                children: <Widget>[
                  Expanded(child: Divider(color: Colors.grey)),
                  Padding(
                    padding: EdgeInsets.symmetric(horizontal: 10),
                    child: Text('Or'),
                  ),
                  Expanded(child: Divider(color: Colors.grey)),
                ],
              ),
              const SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: [
                  SizedBox(
                    width: 40,
                    height: 40,
                    child: IconButton(
                      icon: Image.network(
                        "https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Facebook_Logo_%282019%29.png/768px-Facebook_Logo_%282019%29.png",
                        fit: BoxFit.contain,
                      ),
                      iconSize: 30, // Reduced size
                      onPressed: () {},
                    ),
                  ),
                  SizedBox(
                    width: 40,
                    height: 40,
                    child: IconButton(
                      icon: Image.network(
                        "https://cdn4.iconfinder.com/data/icons/logos-brands-7/512/google_logo-google_icongoogle-512.png",
                        fit: BoxFit.contain,
                      ),
                      iconSize: 30, // Reduced size
                      onPressed: () {},
                    ),
                  ),
                  SizedBox(
                    width: 40,
                    height: 40,
                    child: IconButton(
                      icon: Image.network(
                        'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRCvh-j7HsTHJ8ZckknAoiZMx9VcFmsFkv72g&s',
                        fit: BoxFit.contain,
                      ),
                      iconSize: 30, // Reduced size
                      onPressed: () {},
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),
              Center(
                child: TextButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => SignupScreen(idPassList)),
                    );
                  },
                  child: const Text.rich(
                    TextSpan(
                      text: "Don't have an account? ",
                      children: [
                        TextSpan(
                          text: 'Signup',
                          style: TextStyle(color: Colors.orange),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class SignupScreen extends StatefulWidget {
  final List<Autogenerated>? idPassList;

  SignupScreen(this.idPassList);

  @override
  _SignupScreenState createState() => _SignupScreenState();
}

class _SignupScreenState extends State<SignupScreen> {
  final TextEditingController idController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();
  String? errorMessage;

  void signup() {
    String id = idController.text;
    String password = passwordController.text;

    if (id.isNotEmpty && password.isNotEmpty) {
      if (widget.idPassList != null &&
          !widget.idPassList!.any((item) => item.id == id)) {
        setState(() {
          widget.idPassList!.add(Autogenerated(id: id, password: password));
          errorMessage = 'Signup successful! You can now log in.';
        });
        Navigator.pop(context); // Go back to the login screen
      } else {
        setState(() {
          errorMessage = 'ID already exists';
        });
      }
    } else {
      setState(() {
        errorMessage = 'ID and Password cannot be empty';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Signup'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Image.network(
              "https://i.postimg.cc/SQM5Ghk7/Untitled-design.png",
              height: 250,
            ),
            TextField(
              controller: idController,
              decoration: const InputDecoration(
                labelText: 'Enter your User-ID',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 20),
            TextField(
              controller: passwordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'Enter your password',
                border: OutlineInputBorder(),
                suffixIcon: Icon(Icons.visibility),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: signup,
              child: const Text('Signup', style: TextStyle(fontSize: 18)),
              style: ElevatedButton.styleFrom(
                padding: const EdgeInsets.symmetric(vertical: 15),
                backgroundColor: Colors.orange,
              ),
            ),
            if (errorMessage != null) ...[
              const SizedBox(height: 20),
              Text(
                errorMessage!,
                style: const TextStyle(color: Colors.red),
              ),
            ],
          ],
        ),
      ),
    );
  }
}
